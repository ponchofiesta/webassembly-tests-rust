[package]
name = "webassembly-benchmarks-rust"
version = "0.1.0"
authors = ["Michael Richter"]

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
cfg-if = "0.1.2"

# WASM
#wasm-bindgen = "0.2"
# Use 0.2.34 to make WASM work in Create React App
wasm-bindgen = { version = "=0.2.34", features = ["serde-serialize"] }
#wasm-bindgen = { version = "=0.2.42", features = ["serde-serialize"] }
wasm-bindgen-futures = "0.3.11"
#wasm-bindgen-futures = "0.3.19"
web-sys = { version = "0.3.11", features = ["console", "Headers", "Request", "RequestInit", "RequestMode", "Response", "Window", "HtmlImageElement", "HtmlCanvasElement", "CanvasRenderingContext2d", "ImageData"] }
#web-sys = { version = "0.3.19", features = ["console", "Headers", "Request", "RequestInit", "RequestMode", "Response", "Window"] }
js-sys = "0.3.11"
#js-sys = "0.3.19"
serde = "^1.0.90"
serde_derive = "^1.0.90"

# Misc
#futures = "0.1.26"
lazy_static = "1.3.0"

# Encryption
aes-soft = "0.3.3"
block-modes = "0.3.2"

# Compression
deflate = "0.7.19"
inflate = "0.4.5"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.2"

# Benchmarking
criterion = "0.2.11"

[[bench]]
name = "benchmarks"
harness = false

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
